import { config } from 'dotenv';
import { salesAgent } from './agents/salesAgent.js';
import { GHLService } from './services/ghlService.js';
import { HumanMessage, AIMessage } from '@langchain/core/messages';

config();

async function testNewConversation() {
  console.log('üÜï Testing as if it\'s a new conversation...\n');
  
  const ghlService = new GHLService(
    process.env.GHL_API_KEY,
    process.env.GHL_LOCATION_ID
  );
  
  const contactId = 'Kdj9FkxZc3yq7d5tyT97';
  
  // Simulate a conversation that has progressed to the budget stage
  const existingMessages = [
    new HumanMessage("hola"),
    new AIMessage("¬°Hola! Soy Mar√≠a, tu asistente de ventas de Outlet Media. ¬øCu√°l es tu nombre?"),
    new HumanMessage("soy Carlos"),
    new AIMessage("¬°Mucho gusto Carlos! ¬øQu√© tipo de negocio tienes y qu√© problema est√°s enfrentando?"),
    new HumanMessage("tengo una tienda de ropa y no tengo suficientes clientes"),
    new AIMessage("Entiendo Carlos. ¬øCu√°l es tu objetivo principal? ¬øQu√© te gustar√≠a lograr?"),
    new HumanMessage("quiero duplicar mis ventas este a√±o"),
    new AIMessage("¬°Excelente meta! Para ofrecerte la mejor soluci√≥n, ¬øcu√°l es tu presupuesto mensual para marketing?")
  ];
  
  // Now customer responds with budget
  const newMessage = new HumanMessage("tengo 400 dolares al mes");
  const allMessages = [...existingMessages, newMessage];
  
  console.log('üì® Customer says: "tengo 400 dolares al mes"');
  console.log('Expected: Agent should ask for email since budget is >$300\n');
  
  try {
    const result = await salesAgent({
      messages: allMessages,
      leadInfo: {
        name: "Carlos",
        businessType: "tienda de ropa",
        problem: "no tengo suficientes clientes",
        goal: "duplicar ventas este a√±o",
        budget: null, // Agent should extract this from the message
        email: null
      },
      contactId
    }, {
      configurable: {
        ghlService,
        calendarId: process.env.GHL_CALENDAR_ID,
        contactId
      }
    });
    
    const agentResponse = result.messages[result.messages.length - 1];
    console.log('ü§ñ Agent response:');
    console.log(agentResponse.content);
    
    // Analyze response
    console.log('\nüìä Response Analysis:');
    const response = agentResponse.content.toLowerCase();
    
    const checks = {
      'Mentioned Carlos': response.includes('carlos'),
      'Acknowledged $400 budget': response.includes('400'),
      'Asked for email': response.includes('email') || response.includes('correo'),
      'Professional tone': !response.includes('error') && !response.includes('problema t√©cnico'),
      'Context aware': !response.includes('nombre?') && !response.includes('tipo de negocio')
    };
    
    Object.entries(checks).forEach(([check, passed]) => {
      console.log(`${passed ? '‚úÖ' : '‚ùå'} ${check}`);
    });
    
    const score = Object.values(checks).filter(v => v).length;
    console.log(`\nüèÜ Score: ${score}/5`);
    
    if (score >= 4) {
      console.log('‚úÖ SUCCESS: Agent is working properly!');
    } else {
      console.log('‚ö†Ô∏è  Agent needs improvement');
    }
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
    console.error(error.stack);
  }
}

testNewConversation();